import logging
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile


from dotenv import load_dotenv
import os

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


ANIMALS = ['owl', 'elephant', 'bear', 'zebra', 'turtle', 'lemur', 'parrot']
QUESTIONS = [
    {
        'text': "–ì–¥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
        'options': ["–ù–∞ –±–µ—Ä–µ–≥—É —Ä–µ–∫–∏", "–í –≥–æ—Ä–∞—Ö", "–í –∑–µ–ª—ë–Ω–æ–º –ª–µ—Å—É", "–í –≥–æ—Ä–æ–¥—Å–∫–æ–π —á–µ—Ä—Ç–µ"],
        'weights': [
            {'owl':1,'elephant':0,'bear':0,'zebra':0,'turtle':2,'lemur':1,'parrot':0},
            {'owl':0,'elephant':2,'bear':1,'zebra':0,'turtle':0,'lemur':0,'parrot':0},
            {'owl':0,'elephant':0,'bear':0,'zebra':1,'turtle':2,'lemur':1,'parrot':0},
            {'owl':0,'elephant':0,'bear':1,'zebra':2,'turtle':0,'lemur':0,'parrot':1},
        ]
    },
    {
        'text': "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ç–∏–ø –µ–¥—ã?",
        'options': ["–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π", "–ú—è—Å–Ω–æ–π", "–°–ª–∞–¥–∫–∏–π", "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π"],
        'weights': [
            {'owl':2,'elephant':0,'bear':0,'zebra':0,'turtle':1,'lemur':2,'parrot':1},
            {'owl':0,'elephant':2,'bear':2,'zebra':0,'turtle':0,'lemur':0,'parrot':1},
            {'owl':1,'elephant':0,'bear':0,'zebra':1,'turtle':2,'lemur':1,'parrot':2},
            {'owl':1,'elephant':1,'bear':1,'zebra':2,'turtle':0,'lemur':0,'parrot':1},
        ]
    },
    {
        'text': "–° –∫–∞–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –∂–∏–∑–Ω–∏?",
        'options': ["–ú–µ–¥–ª–µ–Ω–Ω–æ –∏ –≤–¥—É–º—á–∏–≤–æ", "–ë—ã—Å—Ç—Ä–æ –ø–æ –ø–ª–∞–Ω—É", "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –∫–∞–∫ –≤–µ—Ç–µ—Ä", "–í —Å–≤–æ—ë–º —Ç–µ–º–ø–µ"],
        'weights': [
            {'owl':1,'elephant':0,'bear':2,'zebra':0,'turtle':3,'lemur':1,'parrot':0},
            {'owl':0,'elephant':3,'bear':2,'zebra':1,'turtle':0,'lemur':0,'parrot':1},
            {'owl':0,'elephant':0,'bear':0,'zebra':3,'turtle':0,'lemur':2,'parrot':2},
            {'owl':1,'elephant':1,'bear':1,'zebra':0,'turtle':0,'lemur':2,'parrot':1},
        ]
    },
]


class QuizStates(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    RESULT = State()


async def send_question(chat: types.Message | types.CallbackQuery, q_index: int):
    logger.info(f"üìã –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–æ–ø—Ä–æ—Å #{q_index+1}")
    try:
        q = QUESTIONS[q_index]
        builder = InlineKeyboardBuilder()
        for idx, opt in enumerate(q['options']):
            builder.button(text=opt, callback_data=f"answer:{q_index}:{idx}")
        builder.adjust(1)
        markup = builder.as_markup()
        if isinstance(chat, types.Message):
            await chat.answer(q['text'], reply_markup=markup)
        else:
            await chat.message.answer(q['text'], reply_markup=markup)
    except Exception:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ #{q_index+1}")

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.update_data(scores={animal: 0 for animal in ANIMALS})
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ¬´–ö–∞–∫–æ–µ —É –≤–∞—Å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?¬ª\n–ü–æ–µ—Ö–∞–ª–∏!"
    )
    await state.set_state(QuizStates.Q1)
    await send_question(message, 0)

@dp.callback_query(lambda c: c.data.startswith("answer"))
async def process_answer(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    q_idx, opt_idx = map(int, callback.data.split(':')[1:])
    data = await state.get_data()
    scores = data.get('scores', {})
    for animal, w in QUESTIONS[q_idx]['weights'][opt_idx].items():
        scores[animal] = scores.get(animal, 0) + w
    await state.update_data(scores=scores)

    next_q = q_idx + 1
    if next_q < len(QUESTIONS):
        await state.set_state(list(QuizStates)[next_q])
        await send_question(callback, next_q)
    else:
        top = max(scores.values())
        winners = [a for a, v in scores.items() if v == top]
        result = random.choice(winners)
        names = {
            'owl': '–°–æ–≤–∞',
            'elephant': '–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω',
            'bear': '–ë—É—Ä—ã–π –º–µ–¥–≤–µ–¥—å',
            'zebra': '–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏',
            'turtle': '–õ—É—á–∏—Å—Ç–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞',
            'lemur': '–õ–µ–º—É—Ä',
            'parrot': '–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –∑–µ–ª—ë–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π –ø–æ–ø—É–≥–∞–π',
        }
        name_ru = names.get(result, result.capitalize())
        text = (
            f"üéâ –í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: *{name_ru}*! üéâ\n–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏ —Å—Ç–∞–Ω—å—Ç–µ –æ–ø–µ–∫—É–Ω–æ–º."
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± –æ–ø–µ–∫–µ üß°", url="https://moscowzoo.ru/about/guardianship")
        builder.button(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ üîÑ", callback_data="restart")
        builder.button(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram üì¢", switch_inline_query="")
        builder.adjust(1)
        markup = builder.as_markup()

        photo_path = f"images/{result}.jpg"
        try:
            photo = FSInputFile(photo_path)
            await bot.send_photo(
                callback.from_user.id,
                photo=photo,
                caption=text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        except Exception as e:
            await bot.send_message(
                callback.from_user.id,
                text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        await state.clear()

@dp.callback_query(lambda c: c.data == "restart")
async def process_restart(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await cmd_start(callback.message, state)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("/start ‚Äî –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n/feedback ‚Äî –æ—Ç–∑—ã–≤")

@dp.message(Command("feedback"))
async def cmd_feedback(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤, –º—ã —É—á—Ç—ë–º –µ–≥–æ!")


async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())
